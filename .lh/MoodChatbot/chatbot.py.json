{
    "sourceFile": "MoodChatbot/chatbot.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1748348466893,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1748350269595,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,9 +104,9 @@\n         return {\"message\": \"New conversation started.\"}\n     finally:\n         db.close()\n \n-from models import ChatMessage\n+from MoodChatbot.models import ChatMessage\n from database import Base, engine\n \n Base.metadata.create_all(bind=engine)\n \n"
                }
            ],
            "date": 1748348466893,
            "name": "Commit-0",
            "content": "from fastapi import FastAPI\nfrom pydantic import BaseModel\nimport google.generativeai as genai\nfrom dotenv import load_dotenv\nimport os\nfrom fastapi.middleware.cors import CORSMiddleware\nimport json\nfrom database import SessionLocal\n\n\napp = FastAPI()\n\n# CORS setup so frontend can access it\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n\nload_dotenv()\nDATABASE_URL = os.getenv(\"DATABASE_URL\")\n\n# Configure Gemini API\ngenai.configure(api_key=os.getenv(\"GEMINI_API_KEY\"))\nmodel = genai.GenerativeModel(\"models/gemini-1.5-flash\")\n\n# Emotional keyword mapping and system instructions\nemotional_keywords = {\n    \"happy\": \"The user feels happy. Celebrate their positive mood, reflect their joy, and encourage them to savor and express gratitude for this moment.\",\n    \"sad\": \"The user is feeling sad. Respond gently and supportively. Ask open-ended questions to help them express what’s making them feel this way. If sadness persists, remind them it's okay to seek help.\",\n    \"angry\": \"The user feels angry. Acknowledge their frustration without judgment. Encourage them to talk about what's upsetting them and guide them toward calming techniques.\",\n    \"fear\": \"The user feels afraid. Offer reassurance and safety. Ask what’s causing the fear and gently help them feel heard. Suggest grounding techniques.\",\n    \"disgust\": \"The user is feeling disgusted or repulsed. Acknowledge the emotion respectfully and ask what triggered it. Guide them toward understanding and processing the experience.\",\n    \"surprise\": \"The user is surprised. Ask if it's a pleasant or unpleasant surprise and respond accordingly with curiosity and empathy.\",\n    \"neutral\": \"The user feels neutral or unsure. Gently ask how their day is going or if something is on their mind. Encourage them to open up without pressure.\",\n}\n\nsystem_instruction = (\n    \"Buddy is a warm and therapeutic emotional companion who responds with empathy, kindness, and understanding. \"\n    \"Buddy’s role is to provide emotional support like a gentle therapist: sometimes asking caring questions to help the user open up, \"\n    \"especially when they seem unsure or reluctant. Buddy always validates feelings and encourages healthy expression. \"\n    \"If the user still feels unwell after chatting, Buddy should gently suggest seeking support from a professional therapist and offer to help find resources. \"\n    \"Avoid giving multiple options; instead, provide clear, compassionate, and supportive guidance tailored to the user's emotional state.\"\n)\n\n# Input model for request\nclass UserInput(BaseModel):\n    user_id: str\n    message: str\n\n\n# Test route\n@app.get(\"/\")\ndef root():\n    return {\"message\": \"Chatbot is running\"}\n\n\n# Chatbot route\n@app.post(\"/chatbot/\")\nasync def chatbot(input: UserInput):\n    try:\n        db = SessionLocal()\n        user_id = input.user_id  # Add user_id to your UserInput model\n        user_messages = db.query(ChatMessage).filter(ChatMessage.user_id == user_id).order_by(ChatMessage.timestamp).all()\n        history = [{\"sender\": m.sender, \"message\": m.message} for m in user_messages]\n\n        # Build prompt with history\n        prompt = \"\\n\".join(f\"{m['sender']}: {m['message']}\" for m in history)\n        prompt = f\"{system_instruction}\\n{prompt}\\nuser: {input.message}\\nbot:\"\n\n        response = model.generate_content(prompt)\n        reply = response.text.strip()\n\n        # Save both messages\n        db.add(ChatMessage(user_id=user_id, sender=\"user\", message=input.message))\n        db.add(ChatMessage(user_id=user_id, sender=\"bot\", message=reply))\n        db.commit()\n\n        return {\"reply\": reply}\n    except Exception as e:\n        return {\"error\": str(e)}\n    finally:\n        db.close()\n\n\n@app.get(\"/chatbot/resume\")\ndef resume_session(user_id: str):\n    db = SessionLocal()\n    try:\n        messages = db.query(ChatMessage).filter(ChatMessage.user_id == user_id).order_by(ChatMessage.timestamp).all()\n        return {\"session\": [{\"sender\": m.sender, \"message\": m.message} for m in messages]}\n    finally:\n        db.close()\n\n\n@app.post(\"/chatbot/new\")\ndef new_session(user_id: str):\n    db = SessionLocal()\n    try:\n        db.query(ChatMessage).filter(ChatMessage.user_id == user_id).delete()\n        db.commit()\n        return {\"message\": \"New conversation started.\"}\n    finally:\n        db.close()\n\nfrom models import ChatMessage\nfrom database import Base, engine\n\nBase.metadata.create_all(bind=engine)\n\n"
        }
    ]
}